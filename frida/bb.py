#!/usr/bin/env python3
# build_and_push.py
# Script thay th·∫ø Makefile: build v√† push .so l√™n thi·∫øt b·ªã Android

import os
import subprocess
import sys

# ================== C·∫§U H√åNH ==================
# ‚úÖ ƒê·∫∑t NDK_PATH: tr·ªè ƒë·∫øn th∆∞ m·ª•c G·ªêC c·ªßa NDK, KH√îNG ph·∫£i ...\build
NDK_PATH = r"C:\android-ndk-r15c"  # <-- S·ª¨A ƒê∆Ø·ªúNG D·∫™N N·∫æU C·∫¶N

# N·∫øu b·∫°n mu·ªën d√πng bi·∫øn m√¥i tr∆∞·ªùng: b·ªè comment d√≤ng d∆∞·ªõi
# NDK_PATH = os.getenv("NDK_PATH", r"C:\android-ndk-r15c")


ADB = "adb"                     # ƒê·∫£m b·∫£o adb ·ªü trong PATH
PROJECT_ROOT = "./c"              # <-- S·ª≠a ·ªü ƒë√¢y
LIBS_DIR = "../frida/c/libs"  
# ================== H√ÄM H·ªñ TR·ª¢ ==================

def run_command(cmd, shell=True, check=True, cwd=None):
    """Ch·∫°y l·ªánh v√† in ra m√†n h√¨nh"""
    print(f"[RUN] {cmd}")
    try:
        result = subprocess.run(cmd, shell=shell, cwd=cwd, check=check)
        return result
    except subprocess.CalledProcessError as e:
        print(f"‚ùå L·ªánh th·∫•t b·∫°i v·ªõi m√£ {e.returncode}")
        print(f"   {cmd}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå L·ªói h·ªá th·ªëng khi ch·∫°y l·ªánh: {e}")
        sys.exit(1)

def check_ndk_path():
    """Ki·ªÉm tra NDK_PATH h·ª£p l·ªá v√† t·ªìn t·∫°i ndk-build.cmd"""
    global NDK_PATH

    if not NDK_PATH:
        print("‚ùå L·ªói: NDK_PATH ch∆∞a ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a.")
        print("Vui l√≤ng ƒë·∫∑t NDK_PATH trong script ho·∫∑c m√¥i tr∆∞·ªùng.")
        sys.exit(1)

    if not os.path.isdir(NDK_PATH):
        print(f"‚ùå Th∆∞ m·ª•c NDK kh√¥ng t·ªìn t·∫°i: {NDK_PATH}")
        sys.exit(1)

    ndk_build = os.path.join(NDK_PATH, "ndk-build.cmd")
    if not os.path.isfile(ndk_build):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y ndk-build.cmd t·∫°i: {ndk_build}")
        print("üí° Ki·ªÉm tra: NDK_PATH ph·∫£i tr·ªè ƒë·∫øn th∆∞ m·ª•c G·ªêC c·ªßa NDK (v√≠ d·ª•: C:\\android-ndk-r15c)")
        sys.exit(1)

    print(f"‚úÖ NDK_PATH h·ª£p l·ªá: {NDK_PATH}")
    return ndk_build

def build():
    """Build d·ª± √°n b·∫±ng ndk-build"""
    print("üî® B·∫Øt ƒë·∫ßu build native code...")
    ndk_build_cmd = os.path.join(NDK_PATH, "ndk-build.cmd")
    cmd = f'"{ndk_build_cmd}" V=1 -C "{PROJECT_ROOT}"'
    run_command(cmd)
    print("‚úÖ Build th√†nh c√¥ng!")

def clean():
    """D·ªçn d·∫πp file build"""
    print("üßπ D·ªçn d·∫πp file build...")
    ndk_build_cmd = os.path.join(NDK_PATH, "ndk-build.cmd")
    cmd = f'"{ndk_build_cmd}" clean -C "{PROJECT_ROOT}"'
    run_command(cmd)
    print("‚úÖ ƒê√£ d·ªçn d·∫πp.")

def get_device_abi():
    """L·∫•y ABI ch√≠nh c·ªßa thi·∫øt b·ªã ƒëang k·∫øt n·ªëi"""
    try:
        result = subprocess.run(
            [ADB, "shell", "getprop", "ro.product.cpu.abilist"],
            capture_output=True,
            text=True,
            check=True
        )
        abilist = result.stdout.strip().split(',')
        abilist = [abi.strip() for abi in abilist if abi.strip()]

        if not abilist:
            print("‚ùå Kh√¥ng th·ªÉ l·∫•y ABI t·ª´ thi·∫øt b·ªã.")
            return None

        print(f"üì± Thi·∫øt b·ªã h·ªó tr·ª£ c√°c ABI: {', '.join(abilist)}")

        if "arm64-v8a" in abilist:
            return "arm64-v8a"
        elif "armeabi-v7a" in abilist:
            return "armeabi-v7a"
        else:
            print(f"‚ùå Kh√¥ng h·ªó tr·ª£ c√°c ABI: {abilist}")
            return None
    except Exception as e:
        print(f"‚ùå L·ªói khi k·∫øt n·ªëi thi·∫øt b·ªã: {e}")
        return None

def push_libs(abi):
    """Push t·∫•t c·∫£ file .so trong th∆∞ m·ª•c libs/abi l√™n thi·∫øt b·ªã"""
    libs_path = os.path.join(LIBS_DIR, abi)
    if not os.path.isdir(libs_path):
        print(f"‚ùå Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: {libs_path}")
        print("üí° Ch·∫°y 'python build_and_push.py' ƒë·ªÉ build tr∆∞·ªõc.")
        sys.exit(1)

    so_files = [f for f in os.listdir(libs_path) if f.endswith(".so")]
    if not so_files:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file .so trong {libs_path}")
        sys.exit(1)

    print(f"üì§ ƒêang push {len(so_files)} file .so ƒë·∫øn /data/local/tmp")
    for so_file in so_files:
        src = os.path.join(libs_path, so_file)
        cmd = f'{ADB} push "{src}" /data/local/tmp/'
        run_command(cmd)

    print("‚úÖ ƒê√£ push th√†nh c√¥ng l√™n thi·∫øt b·ªã!")

# ================== CH√çNH ==================
def main():
    if len(sys.argv) > 1:
        if sys.argv[1] == "clean":
            clean()
            return
        else:
            print(f"‚ùå L·ªánh kh√¥ng h·ª£p l·ªá: {sys.argv[1]}")
            print("S·ª≠ d·ª•ng:")
            print("  python build_and_push.py          - Build v√† push")
            print("  python build_and_push.py clean    - D·ªçn d·∫πp")
            sys.exit(1)

    # Ki·ªÉm tra ADB
    try:
        subprocess.run([ADB, "devices"], check=True, capture_output=True)
    except:
        print("‚ùå ADB kh√¥ng ho·∫°t ƒë·ªông. Vui l√≤ng:")
        print("  1. K·∫øt n·ªëi thi·∫øt b·ªã Android")
        print("  2. B·∫≠t USB Debugging")
        print("  3. ƒê·∫£m b·∫£o 'adb' c√≥ trong PATH")
        sys.exit(1)

    # C√°c b∆∞·ªõc ch√≠nh
    check_ndk_path()
    build()

    abi = get_device_abi()
    if not abi:
        sys.exit(1)

    push_libs(abi)

if __name__ == "__main__":
    main()